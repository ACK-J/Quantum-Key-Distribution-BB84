//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"BB84\",\"Name\":\"Start\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":44,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" @EntryPoint()\",\" operation SayHello() : Unit {\",\"     Message(\\\"Hello quantum world!\\\");\",\" }\",\"\",\" operation DiagonalBasis (qs : Qubit[]): Unit{\",\"     ApplyToEachA(H, qs); // this applies the Hadamard gateto each element of qs[]\",\"     X(qs[i]); //where qs[] is the qubit array\",\"     Measure([PauliZ], [q]); // where PauliZ is the standard/horizontal basisand q is a qubit ptr\",\" }\",\"\",\" operation SampleQuantumRandomNumberGenerator() : Result {\",\"     use q = Qubit();   // Allocate a qubit.\",\"     H(q);              // Put the qubit to superposition. It now has a 50% chance of being 0 or 1.\",\"     return MResetZ(q); // Measure the qubit value.\",\" }\",\"\",\" operation SampleRandomNumberInRange(max : Int) : Int {\",\"     mutable bits = new Result[0];\",\"     for idxBit in 1..BitSizeI(max) {\",\"         set bits += [SampleQuantumRandomNumberGenerator()];\",\"     }\",\"     let sample = ResultArrayAsInt(bits);\",\"     return sample > max\",\"            ? SampleRandomNumberInRange(max)\",\"            | sample;\",\" }\"],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/jack/Desktop/BB84/BB84/Program.qs\",\"Position\":{\"Item1\":45,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":16}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"BB84\",\"Name\":\"Start\"},\"Attributes\":[],\"SourceFile\":\"/home/jack/Desktop/BB84/BB84/Program.qs\",\"Position\":{\"Item1\":45,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":16}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"BB84\",\"Name\":\"RunBB84Protocol\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/jack/Desktop/BB84/BB84/Program.qs\",\"Position\":{\"Item1\":51,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"expectedKeyLength\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":44}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"eavesdropperProbability\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":75}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Double\"}]]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"BB84\",\"Name\":\"RunBB84Protocol\"},\"Attributes\":[],\"SourceFile\":\"/home/jack/Desktop/BB84/BB84/Program.qs\",\"Position\":{\"Item1\":51,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
#line hidden
namespace BB84
{
    [SourceLocation("/home/jack/Desktop/BB84/BB84/Program.qs", OperationFunctor.Body, 46, 52)]
    public partial class Start : Operation<QVoid, QVoid>, ICallable
    {
        public Start(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Start";
        String ICallable.FullName => "BB84.Start";
        public static EntryPointInfo<QVoid, QVoid> Info => new EntryPointInfo<QVoid, QVoid>(typeof(Start));
        protected ICallable<(Int64,Double), Boolean> RunBB84Protocol__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 48 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var result1 = RunBB84Protocol__.Apply((32L, 0.5D));
#line 49 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply(("Running the protocol for 256 bit key with eavesdropping probability 1 resulted in " + (result1 ? "succcess" : "failure")));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.RunBB84Protocol__ = this.__Factory__.Get<ICallable<(Int64,Double), Boolean>>(typeof(RunBB84Protocol));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Start, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/jack/Desktop/BB84/BB84/Program.qs", OperationFunctor.Body, 52, -1)]
    public partial class RunBB84Protocol : Operation<(Int64,Double), Boolean>, ICallable
    {
        public RunBB84Protocol(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Double)>, IApplyData
        {
            public In((Int64,Double) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "RunBB84Protocol";
        String ICallable.FullName => "BB84.RunBB84Protocol";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<Double, Boolean> Microsoft__Quantum__Random__DrawRandomBool
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Pauli>,IQArray<Qubit>), Result> Measure__
        {
            get;
            set;
        }

        protected ICallable<Result, Boolean> Microsoft__Quantum__Convert__ResultAsBool
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Chunks
        {
            get;
            set;
        }

        protected ICallable<QRange, IQArray<Int64>> Microsoft__Quantum__Convert__RangeAsIntArray
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__IndexRange
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Exclude
        {
            get;
            set;
        }

        protected ICallable<Int64, String> Microsoft__Quantum__Convert__IntAsString
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__EqualA
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean), Boolean> Microsoft__Quantum__Logical__EqualB
        {
            get;
            set;
        }

        public override Func<(Int64,Double), Boolean> __Body__ => (__in__) =>
        {
            var (expectedKeyLength,eavesdropperProbability) = __in__;
#line 53 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var chunk = 16L;
#line 60 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var roundtrips = (((4L * expectedKeyLength) + (2L * chunk)) / chunk);
#line 62 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var aliceValues = QArray<Boolean>.Create(0L);
#line 63 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var aliceBases = QArray<Boolean>.Create(0L);
#line 64 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var bobResults = QArray<Boolean>.Create(0L);
#line 65 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var bobBases = QArray<Boolean>.Create(0L);
#line 67 "/home/jack/Desktop/BB84/BB84/Program.qs"
            foreach (var roundtrip in new QRange(0L, (roundtrips - 1L)))
#line hidden
            {
#line hidden
                {
#line 68 "/home/jack/Desktop/BB84/BB84/Program.qs"
                    var qubits = Allocate__.Apply(chunk);
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 72 "/home/jack/Desktop/BB84/BB84/Program.qs"
                        foreach (var qubit in qubits)
#line hidden
                        {
#line 75 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            var valueSelected = Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D);
#line 76 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            if (valueSelected)
                            {
#line 76 "/home/jack/Desktop/BB84/BB84/Program.qs"
                                Microsoft__Quantum__Intrinsic__X.Apply(qubit);
                            }

#line 77 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            aliceValues = QArray<Boolean>.Add(aliceValues, new QArray<Boolean>(valueSelected));
#line 82 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            var aliceBasisSelected = Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D);
#line 83 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            if (aliceBasisSelected)
                            {
#line 83 "/home/jack/Desktop/BB84/BB84/Program.qs"
                                Microsoft__Quantum__Intrinsic__H.Apply(qubit);
                            }

#line 84 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            aliceBases = QArray<Boolean>.Add(aliceBases, new QArray<Boolean>(aliceBasisSelected));
                        }

#line 87 "/home/jack/Desktop/BB84/BB84/Program.qs"
                        foreach (var qubit in qubits)
#line hidden
                        {
#line 88 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            var shouldEavesdrop = Microsoft__Quantum__Random__DrawRandomBool.Apply(eavesdropperProbability);
#line 89 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            if (shouldEavesdrop)
                            {
#line 90 "/home/jack/Desktop/BB84/BB84/Program.qs"
                                var eveBasisSelected = Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D);
#line 91 "/home/jack/Desktop/BB84/BB84/Program.qs"
                                var eveResult = Measure__.Apply((new QArray<Pauli>((eveBasisSelected ? Pauli.PauliX : Pauli.PauliZ)), new QArray<Qubit>(qubit)));
                            }
                        }

#line 94 "/home/jack/Desktop/BB84/BB84/Program.qs"
                        foreach (var qubit in qubits)
#line hidden
                        {
#line 98 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            var bobBasisSelected = Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D);
#line 99 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            bobBases = QArray<Boolean>.Add(bobBases, new QArray<Boolean>(bobBasisSelected));
#line 100 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            var bobResult = Measure__.Apply((new QArray<Pauli>((bobBasisSelected ? Pauli.PauliX : Pauli.PauliZ)), new QArray<Qubit>(qubit)));
#line 101 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            bobResults = QArray<Boolean>.Add(bobResults, new QArray<Boolean>(Microsoft__Quantum__Convert__ResultAsBool.Apply(bobResult)));
#line 102 "/home/jack/Desktop/BB84/BB84/Program.qs"
                            Reset__.Apply(qubit);
                        }
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(qubits);
                        }
                    }
                }
            }

#line 107 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply("Comparing bases....");
#line 108 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var aliceValuesAfterBasisComparison = QArray<Boolean>.Create(0L);
#line 109 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var bobValuesAfterBasisComparison = QArray<Boolean>.Create(0L);
#line 112 "/home/jack/Desktop/BB84/BB84/Program.qs"
            foreach (var i in new QRange(0L, (aliceValues.Length - 1L)))
#line hidden
            {
#line 115 "/home/jack/Desktop/BB84/BB84/Program.qs"
                if ((aliceBases[i] == bobBases[i]))
                {
#line 116 "/home/jack/Desktop/BB84/BB84/Program.qs"
                    aliceValuesAfterBasisComparison = QArray<Boolean>.Add(aliceValuesAfterBasisComparison, new QArray<Boolean>(aliceValues[i]));
#line 117 "/home/jack/Desktop/BB84/BB84/Program.qs"
                    bobValuesAfterBasisComparison = QArray<Boolean>.Add(bobValuesAfterBasisComparison, new QArray<Boolean>(bobResults[i]));
                }
            }

#line 120 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply("Bases compared.");
#line 121 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply("Performing eavesdropping check....");
#line 123 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var eavesdropppingIndices = QArray<Int64>.Create(0L);
#line 124 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var chunkedValues = (IQArray<IQArray<Int64>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Int64>>>((2L, Microsoft__Quantum__Convert__RangeAsIntArray.Apply(Microsoft__Quantum__Arrays__IndexRange.Apply<QRange>(aliceValuesAfterBasisComparison?.Copy()))));
#line 125 "/home/jack/Desktop/BB84/BB84/Program.qs"
            foreach (var i in Microsoft__Quantum__Arrays__IndexRange.Apply<QRange>(chunkedValues))
#line hidden
            {
#line 126 "/home/jack/Desktop/BB84/BB84/Program.qs"
                if ((chunkedValues[i].Length == 1L))
                {
#line 127 "/home/jack/Desktop/BB84/BB84/Program.qs"
                    eavesdropppingIndices = QArray<Int64>.Add(eavesdropppingIndices, new QArray<Int64>(chunkedValues[i][0L]));
                }
                else
                {
#line 129 "/home/jack/Desktop/BB84/BB84/Program.qs"
                    eavesdropppingIndices = QArray<Int64>.Add(eavesdropppingIndices, new QArray<Int64>((Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D) ? chunkedValues[i][0L] : chunkedValues[i][1L])));
                }
            }

#line 133 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var differences = 0L;
#line 134 "/home/jack/Desktop/BB84/BB84/Program.qs"
            foreach (var i in eavesdropppingIndices?.Copy())
#line hidden
            {
#line 137 "/home/jack/Desktop/BB84/BB84/Program.qs"
                if ((aliceValuesAfterBasisComparison[i] != bobValuesAfterBasisComparison[i]))
                {
#line 138 "/home/jack/Desktop/BB84/BB84/Program.qs"
                    differences = (differences + 1L);
                }
            }

#line 141 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var errorRate = (Microsoft__Quantum__Convert__IntAsDouble.Apply(differences) / Microsoft__Quantum__Convert__IntAsDouble.Apply(eavesdropppingIndices.Length));
#line 142 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply(String.Format("Error rate: {0}%", (errorRate * Microsoft__Quantum__Convert__IntAsDouble.Apply(100L))));
#line 143 "/home/jack/Desktop/BB84/BB84/Program.qs"
            if ((errorRate > 0D))
            {
#line 144 "/home/jack/Desktop/BB84/BB84/Program.qs"
                Message__.Apply("Eavesdropper detected! Aborting the protocol");
#line 145 "/home/jack/Desktop/BB84/BB84/Program.qs"
                return false;
            }
            else
            {
#line 147 "/home/jack/Desktop/BB84/BB84/Program.qs"
                Message__.Apply("No eavesdropper detected.");
            }

#line 150 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var aliceKey = (IQArray<Boolean>)Microsoft__Quantum__Arrays__Exclude.Apply<IQArray<Boolean>>((eavesdropppingIndices?.Copy(), aliceValuesAfterBasisComparison?.Copy()));
#line 151 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var bobKey = (IQArray<Boolean>)Microsoft__Quantum__Arrays__Exclude.Apply<IQArray<Boolean>>((eavesdropppingIndices?.Copy(), bobValuesAfterBasisComparison?.Copy()));
#line 153 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply(String.Format("Alice's key: {0} | key length: {1}", aliceKey, Microsoft__Quantum__Convert__IntAsString.Apply(aliceKey.Length)));
#line 154 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply(String.Format("Bob's key:   {0} | key length: {1}", bobKey, Microsoft__Quantum__Convert__IntAsString.Apply(bobKey.Length)));
#line 155 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply("");
#line 157 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var keysEqual = Microsoft__Quantum__Arrays__EqualA.Apply<Boolean>((Microsoft__Quantum__Logical__EqualB, aliceKey, bobKey));
#line 158 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply(String.Format("Keys are equal? {0}", keysEqual));
#line 159 "/home/jack/Desktop/BB84/BB84/Program.qs"
            if (!(keysEqual))
            {
#line 160 "/home/jack/Desktop/BB84/BB84/Program.qs"
                Message__.Apply("Keys are not equal, aborting the protocol");
#line 161 "/home/jack/Desktop/BB84/BB84/Program.qs"
                return false;
            }

#line 164 "/home/jack/Desktop/BB84/BB84/Program.qs"
            if ((aliceKey.Length < expectedKeyLength))
            {
#line 165 "/home/jack/Desktop/BB84/BB84/Program.qs"
                Message__.Apply("Key is too short, aborting the protocol");
#line 166 "/home/jack/Desktop/BB84/BB84/Program.qs"
                return false;
            }

#line 169 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply("");
#line 170 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var trimmedKey = (IQArray<Boolean>)aliceKey.Slice(new QRange(0L, (expectedKeyLength - 1L)));
#line 171 "/home/jack/Desktop/BB84/BB84/Program.qs"
            Message__.Apply(String.Format("Final trimmed {0}bit key: {1}", expectedKeyLength, trimmedKey));
#line 174 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var a = (IQArray<Boolean>)aliceKey;
#line 175 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var message = "Hello Quantum World";
#line 176 "/home/jack/Desktop/BB84/BB84/Program.qs"
            var b = (IQArray<Boolean>)bobKey;
#line 181 "/home/jack/Desktop/BB84/BB84/Program.qs"
            return true;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Random__DrawRandomBool = this.__Factory__.Get<ICallable<Double, Boolean>>(typeof(global::Microsoft.Quantum.Random.DrawRandomBool));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Measure__ = this.__Factory__.Get<ICallable<(IQArray<Pauli>,IQArray<Qubit>), Result>>(typeof(global::Microsoft.Quantum.Intrinsic.Measure));
            this.Microsoft__Quantum__Convert__ResultAsBool = this.__Factory__.Get<ICallable<Result, Boolean>>(typeof(global::Microsoft.Quantum.Convert.ResultAsBool));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Arrays__Chunks = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Chunks<>));
            this.Microsoft__Quantum__Convert__RangeAsIntArray = this.__Factory__.Get<ICallable<QRange, IQArray<Int64>>>(typeof(global::Microsoft.Quantum.Convert.RangeAsIntArray));
            this.Microsoft__Quantum__Arrays__IndexRange = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.IndexRange<>));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Arrays__Exclude = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Exclude<>));
            this.Microsoft__Quantum__Convert__IntAsString = this.__Factory__.Get<ICallable<Int64, String>>(typeof(global::Microsoft.Quantum.Convert.IntAsString));
            this.Microsoft__Quantum__Arrays__EqualA = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.EqualA<>));
            this.Microsoft__Quantum__Logical__EqualB = this.__Factory__.Get<ICallable<(Boolean,Boolean), Boolean>>(typeof(global::Microsoft.Quantum.Logical.EqualB));
        }

        public override IApplyData __DataIn__((Int64,Double) data) => new In(data);
        public override IApplyData __DataOut__(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, Int64 expectedKeyLength, Double eavesdropperProbability)
        {
            return __m__.Run<RunBB84Protocol, (Int64,Double), Boolean>((expectedKeyLength, eavesdropperProbability));
        }
    }
}